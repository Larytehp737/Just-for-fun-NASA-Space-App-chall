#!/usr/bin/env python3
"""
Script de d√©marrage rapide pour le projet NASA Space App Challenge
"Embiggen your eyes"

Ce script √©vite les probl√®mes d'environnement virtuel et d√©marre directement les serveurs.
"""

import subprocess
import sys
import os
import time
import requests
from pathlib import Path

def run_command(cmd, cwd=None, check=True):
    """Ex√©cute une commande et retourne le r√©sultat"""
    print(f"üîß Ex√©cution: {cmd}")
    try:
        result = subprocess.run(cmd, shell=True, cwd=cwd, check=check, 
                              capture_output=True, text=True)
        if result.stdout:
            print(result.stdout)
        return result
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur: {e}")
        if e.stderr:
            print(f"Stderr: {e.stderr}")
        return e

def check_dependencies():
    """V√©rifie que les d√©pendances de base sont install√©es"""
    print("üì¶ V√©rification des d√©pendances...")
    
    # V√©rifie Python
    python_version = sys.version_info
    if python_version < (3, 8):
        print("‚ùå Python 3.8+ requis")
        return False
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}")
    
    # V√©rifie Node.js
    result = run_command("node --version", check=False)
    if result.returncode != 0:
        print("‚ùå Node.js non install√©")
        return False
    print(f"‚úÖ Node.js {result.stdout.strip()}")
    
    return True

def install_frontend_dependencies():
    """Installe les d√©pendances Node.js"""
    print("üåê Installation des d√©pendances Node.js...")
    
    frontend_dir = Path("embiggen-your-eyes")
    if not frontend_dir.exists():
        print("‚ùå Dossier frontend non trouv√©")
        return False
    
    result = run_command("npm install", cwd=frontend_dir, check=False)
    if result.returncode != 0:
        print("‚ùå √âchec installation d√©pendances Node.js")
        return False
    
    print("‚úÖ D√©pendances Node.js install√©es")
    return True

def start_backend_server():
    """D√©marre le serveur backend avec les d√©pendances syst√®me"""
    print("üöÄ D√©marrage du serveur backend...")
    
    backend_dir = Path("backend")
    
    # Installe les d√©pendances Python avec --break-system-packages
    print("üì¶ Installation des d√©pendances Python...")
    result = run_command("pip install fastapi uvicorn pillow numpy scikit-image requests --break-system-packages", check=False)
    if result.returncode != 0:
        print("‚ö†Ô∏è  Installation des d√©pendances √©chou√©e, tentative de d√©marrage direct...")
    
    # D√©marre le serveur en arri√®re-plan
    process = subprocess.Popen(
        ["python3", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"],
        cwd=backend_dir,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    
    # Attend que le serveur d√©marre
    for i in range(30):  # 30 secondes max
        try:
            response = requests.get("http://localhost:8000/health", timeout=1)
            if response.status_code == 200:
                print("‚úÖ Serveur backend d√©marr√©")
                return process
        except requests.exceptions.RequestException:
            time.sleep(1)
    
    print("‚ùå Timeout d√©marrage serveur backend")
    process.terminate()
    return None

def start_frontend_server():
    """D√©marre le serveur frontend"""
    print("üåê D√©marrage du serveur frontend...")
    
    frontend_dir = Path("embiggen-your-eyes")
    process = subprocess.Popen(
        ["npm", "run", "dev"],
        cwd=frontend_dir,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    
    # Attend que le serveur d√©marre
    for i in range(30):  # 30 secondes max
        try:
            response = requests.get("http://localhost:5173", timeout=1)
            if response.status_code == 200:
                print("‚úÖ Serveur frontend d√©marr√©")
                return process
        except requests.exceptions.RequestException:
            time.sleep(1)
    
    print("‚ùå Timeout d√©marrage serveur frontend")
    process.terminate()
    return None

def test_backend_endpoints():
    """Test des endpoints du backend"""
    print("üîç Test des endpoints backend...")
    
    base_url = "http://localhost:8000"
    
    # Test health
    try:
        response = requests.get(f"{base_url}/health")
        if response.status_code != 200:
            print("‚ùå Endpoint /health √©chou√©")
            return False
        print("‚úÖ Endpoint /health OK")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur connexion backend: {e}")
        return False
    
    # Test annotations
    try:
        response = requests.get(f"{base_url}/annotations")
        if response.status_code != 200:
            print("‚ùå Endpoint /annotations √©chou√©")
            return False
        print("‚úÖ Endpoint /annotations OK")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur endpoint annotations: {e}")
        return False
    
    return True

def main():
    """Fonction principale de d√©marrage rapide"""
    print("üöÄ D√âMARRAGE RAPIDE NASA SPACE APP CHALLENGE")
    print("üéØ Projet: Embiggen Your Eyes")
    print("=" * 60)
    
    try:
        # V√©rification des d√©pendances
        if not check_dependencies():
            print("‚ùå D√©pendances manquantes")
            sys.exit(1)
        
        # Installation frontend
        if not install_frontend_dependencies():
            print("‚ùå √âchec installation frontend")
            sys.exit(1)
        
        # D√©marrage des serveurs
        backend_process = start_backend_server()
        if not backend_process:
            print("‚ùå Impossible de d√©marrer le backend")
            sys.exit(1)
        
        try:
            # Test des endpoints
            if not test_backend_endpoints():
                print("‚ùå Tests endpoints √©chou√©s")
                sys.exit(1)
            
            # D√©marrage frontend
            frontend_process = start_frontend_server()
            if not frontend_process:
                print("‚ùå Impossible de d√©marrer le frontend")
                sys.exit(1)
            
            print("\n" + "=" * 60)
            print("üéâ APPLICATION D√âMARR√âE AVEC SUCC√àS !")
            print("üåê Frontend: http://localhost:5173")
            print("üêç Backend: http://localhost:8000")
            print("üìö API Docs: http://localhost:8000/docs")
            print("=" * 60)
            
            print("\nüìã Fonctionnalit√©s disponibles:")
            print("   ‚úÖ Interface utilisateur moderne")
            print("   ‚úÖ Upload et visualisation d'images")
            print("   ‚úÖ Zoom fluide avec OpenSeadragon")
            print("   ‚úÖ D√©tection d'anomalies")
            print("   ‚úÖ Syst√®me d'annotations")
            print("   ‚úÖ API REST compl√®te")
            
            print("\nüöÄ Pour tester l'application:")
            print("   1. Ouvrez http://localhost:5173 dans votre navigateur")
            print("   2. Uploadez une image")
            print("   3. Testez le zoom et les annotations")
            print("   4. Consultez l'API sur http://localhost:8000/docs")
            
            # Garde les serveurs en vie
            print("\nAppuyez sur Ctrl+C pour arr√™ter les serveurs...")
            while True:
                time.sleep(1)
                
        finally:
            if 'frontend_process' in locals():
                frontend_process.terminate()
            
    except KeyboardInterrupt:
        print("\nüõë Arr√™t des serveurs...")
    except Exception as e:
        print(f"\n‚ùå Erreur lors du d√©marrage: {e}")
    finally:
        if 'backend_process' in locals():
            backend_process.terminate()

if __name__ == "__main__":
    main()
